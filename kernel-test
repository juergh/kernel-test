#!/bin/bash -eu
#
# Run kernel tests in QEMU/KVM
#


function out()
{
	local rc=${?}
	local failed=() passed=()

	trap - EXIT INT TERM HUP

	# Check the logfile for test results
	if [ -e "${LOG_FILE}" ] ; then
		echo "+++ Logfile: ${LOG_FILE}"

		for TEST in "${KT_TESTS[@]}" ; do
			if grep "TEST RESULT: ${TEST} " "${LOG_FILE}" | \
					grep -q PASS  ; then
				passed+=(${TEST})
			else
				failed+=(${TEST})
			fi
		done

		# List the tests that passed
		if [ "${#passed[@]}" -gt 0 ] ; then
			echo -e "\e[92m+++ Tests that passed: ${passed[*]}\e[0m"
		fi

		# List the tests that failed
		if [ "${#failed[@]}" -gt 0 ] ; then
			echo -e "\e[91m+++ Tests that failed: ${failed[*]}\e[0m" >&2
			rc=1
		fi
	fi

	# Print the overall test result
	if [ ${rc} -eq 0 ] ; then
		echo -e "\e[92m+++ SUCCESS: Tests passed\e[0m"
	else
		echo -e "\e[91m+++ FAILURE: Tests failed\e[0m" >&2
	fi

	exit ${rc}
}


function die()
{
	echo -e "\e[91m+++ ERROR: ${*}\e[0m" >&2
	exit 1
}


function usage()
{
    cat <<EOF
Usage: kernel-test [<options>] -k <KERNEL> -t <TEST>[,<TEST>,<TEST>...]

Available options:
  -c, --cmdline <CMDLINE>   Use kernel commandline <CMDLINE> for the tests
  -e, --keep                Keep images after a build failure
  -f, --force               Force a rebuild of all images
  -fi                       Force a rebuild of the initrd image
  -fr                       Force a rebuild of the root image
  -fb                       Force a rebuild of the base image
  -ft                       Force a rebuild of the test image
  -g, --gdb <DEBUGGER>      Enable GDB debugging:
                            <DEBUGGER>=kgdb: Enable KGDB and connect it to
                                             localhost:4001
                            <DEBUGGER>=qemu: Open a QEMU gdbserver on
                                             localhost:4002
  -h, --help                Show this help text
  -k, --kernel <KERNEL>     Use kernel <KERNEL> for the tests
  -l, --loop <COUNT>        Run each test <COUNT> times
  -o, --timeout <SECONDS>   Run each test for <SECONDS> seconds
  -p, --parallel            Run tests in parallel
  -s, --series <SERIES>     Use series <SERIES> for the tests
  -t, --tests <TEST>[,<TEST>,<TEST>...]
                            Run the comma-separated list of tests
                            <TEST>[,<TEST>,<TEST>...]
  -v, --verbose             Increase verbosity (set -x)

QEMU options:
  -qS   Do not start CPU at startup (-S)
EOF
}


# -----------------------------------------------------------------------------
# Main entry point

QEMU_OPTS=()
QEMU_CMDLINE=()

# Parse the commandline arguments
while [ $# -gt 0 ] ; do
	case "${1}" in
		-c|--cmdline)
			shift
			QEMU_CMDLINE+=(${1})
			;;
		-e|--keep)
			# shellcheck disable=SC2034
			KT_KEEP=1
			;;
		-f|--force)
			# shellcheck disable=SC2034
			KT_FORCE_INITRD=1
			KT_FORCE_ROOT=1
			KT_FORCE_BASE=1
			KT_FORCE_TEST=1
			;;
		-fi)
			# shellcheck disable=SC2034
			KT_FORCE_INITRD=1
			;;
		-fr)
			# shellcheck disable=SC2034
			KT_FORCE_ROOT=1
			;;
		-fb)
			# shellcheck disable=SC2034
			KT_FORCE_BASE=1
			;;
		-ft)
			# shellcheck disable=SC2034
			KT_FORCE_TEST=1
			;;
		-g|--gdb)
			shift
			case "${1}" in
				kgdb)
					QEMU_OPTS+=("-serial" "tcp:localhost:4001,server,nowait")
					QEMU_CMDLINE+=("kgdboc=ttyS1")
					;;
				qemu)
					QEMU_OPTS+=("-gdb" "tcp:localhost:4002")
					;;
				*)
					die "Invalid gdb debugger option: ${1}"
					;;
			esac

			;;
		-h|--help)
			usage
			exit 0
			;;
		-k|--kernel)
			shift
			KT_KERNEL=${1}
			;;
		-l|--loop)
			shift
			# shellcheck disable=SC2034
			KT_LOOP_COUNT=${1}
			KT_FORCE_TEST=1
			;;
		-o|--timeout)
			shift
			# shellcheck disable=SC2034
			KT_TIMEOUT=${1}
			KT_FORCE_TEST=1
			;;
		-p|--parallel)
			# shellcheck disable=SC2034
			KT_PARALLEL=1
			KT_FORCE_TEST=1
			;;
		-qS)
			QEMU_OPTS+=(-S)
			;;
		-s|--series)
			shift
			# shellcheck disable=SC2034
			KT_SERIES=${1}
			;;
		-t|--tests)
			shift
			IFS=',' read -r -a KT_TESTS <<< "${1}"
			;;
		-v|--verbose)
			set -x
			;;
		-*)
			die "Invalid option: ${1}"
			;;
		*)
			usage
			exit 2
			;;
	esac
	shift
done

if [ -z "${KT_KERNEL:-}" ] || [ -z "${KT_TESTS:-}" ] ; then
	usage
	exit 2
fi

# shellcheck disable=SC1091
. libs/functions

LOG_DIR=logs
LOG_FILE=${LOG_DIR}/${KT_SERIES}.log

[ -d "${LOG_DIR}" ] || mkdir "${LOG_DIR}"
rm -f "${LOG_FILE}"

trap out EXIT INT TERM HUP

{
	# Create the base, initrd and test images
	kt_create_base
	kt_create_initrd
	kt_create_test

	# Create a clean throw-away base image
	qemu-img create -f qcow2 -o backing_file="${KT_BASE_IMAGE}" build/base.img

	# Run the test(s)
	qemu-system-x86_64 \
		-machine accel=kvm \
		-cpu "${KT_QEMU_CPU:-qemu64}" \
		-smp "${KT_QEMU_SMP:-1}" \
		-m "${KT_QEMU_MEM:-1024}" \
		-kernel "${KT_KERNEL}" \
		-append "earlyprintk=ttyS0 console=ttyS0 ${QEMU_CMDLINE[*]} ${KT_KERNEL_CMDLINE:-}" \
		-initrd "${KT_INITRD_IMAGE}" \
		-drive file=build/base.img,if=none,format=qcow2,id=drive-image0 \
		-device "${QEMU_DISK_DEVICE:-ide-hd}",drive=drive-image0 \
		-drive file="${KT_TEST_IMAGE}",if=none,id=drive-image1,readonly=on \
		-device "${QEMU_DISK_DEVICE:-ide-cd}",drive=drive-image1 \
		-display none \
		-serial stdio \
		-monitor tcp:localhost:4000,server,nowait \
		"${QEMU_OPTS[@]}"

} 2>&1 | tee "${LOG_FILE}"
