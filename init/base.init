#!/bin/bash -eu

function duration()
{
	local runtime=${1}
	local hrs=$((runtime / 3600))
	local min=$(((runtime % 3600) / 60))
	local sec=$((runtime % 60))

	printf "%02d:%02d:%02d [hh:mm:ss]" "${hrs}" "${min}" "${sec}"
}

function print_header()
{
	echo
	echo -n "${1} "
	printf "%0.s=" $(seq 1 $((119 - ${#1})))
	echo
}

function poweroff()
{
	print_header "POWERING OFF" 
	echo 3 > /proc/sys/vm/drop_caches
	sync
	mount -o remount,ro /
	echo o > /proc/sysrq-trigger

	# Wait for the poweroff to happen to prevent:
	# Kernel panic - not syncing: Attempted to kill init!
	sleep 5
}

function print_system_info()
{
	print_header "SYSTEM INFO"

	lsb_release -a
	echo "--------"

	cat /proc/cpuinfo
	echo "--------"

	echo -n "kernel         : "
	uname -a
	echo -n "kernel cmdline : "
	cat /proc/cmdline
}

print_header "RUNNING INIT"

trap poweroff EXIT INT TERM HUP

# Set the hostname
hostname -F /etc/hostname

# Hack to cache the 'test' label
lsblk | tail -n +2 | \
	while read -r dev ; do
		blkid "${dev%% *}" >/dev/null 2>/dev/null || true
	done

# Mount the test image
cat <<EOF >>/etc/fstab
LABEL=test  /test  iso9660  defaults  0  0
EOF
mkdir /test
mount -a

# Check if there is a test list file
if ! [ -e "/test/tests" ] ; then
	echo "+++ No such test list: /test/tests"
	exit 1
fi

# Print some info
print_system_info

# Run the tests
# shellcheck disable=SC2002
TESTS=$(cat /test/tests | tr '\n' ' ')
for TEST in ${TESTS} ; do
	print_header "RUNNING TEST: ${TEST}"

	TEST_BEGIN=$(date +%s)
	TEST_END=

	TEST_RESULT="\e[92mPASS\e[0m"
	cd "/test/${TEST}" && "./${TEST}.test" || TEST_RESULT="\e[91mFAIL\e[0m"

	TEST_END=${TEST_END:-$(date +%s)}

	echo -e "+++ TEST RESULT (${TEST}): ${TEST_RESULT}"
	echo "+++ TEST DURATION: $(duration $((TEST_END - TEST_BEGIN)))"
done

sleep 1
